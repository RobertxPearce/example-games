use Libraries.Game.Graphics.Shaders.Shader

class LevelTransitionShader is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetName("Level Transition Shader")

        /*
        Adapted from a shader by ali on Shadertoy.
        https://www.shadertoy.com/view/wdB3Wc
        Used under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
        */
        SetCode(GetOpenGLVersion() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif
in LOWP vec4 v_color;
in vec2 v_texCoords;
uniform sampler2D u_texture;
uniform float u_aspectRatio;
uniform float iTime;
layout (location = 0) out vec4 outputColor;

#define GLOW 0.55
#define NUM_PARTICLES 300.0



vec3 particles(vec2 uv, vec3 color, float radius, float offset)
{        
    vec2 position = vec2(sin(offset * (iTime+30.)),sin(offset * (iTime+30.)))*
                  (cos((iTime ) - sin(offset)) * atan(offset*1.0));
    
 
    float dist = radius / distance(uv, position);
    return color * pow(dist, 1.0 / GLOW);
}




void main()
{
    // center pixel
//      vec2 uv = (fragCoord.xy- 0.5*iResolution.xy)/iResolution.y;
    vec2 uv = v_texCoords.xy - 0.5;
    
    // Time varying pixel color
    vec3 color ;
    color.r = ((sin(((iTime)) * 0.55) + 1.5) * 0.4);
    color.g = ((sin(((iTime)) * 0.34) + .04) * 0.4);
    color.b = ((sin(((iTime)) * 0.31) + 4.5) * 0.3);
    
    
    vec3 pixel ;
    float radius= 00.09*sin(iTime*1.21);
    
    
    
    
    for    (float i = 0.0; i < NUM_PARTICLES; i++)
        pixel += abs(particles(uv, color, radius, i / NUM_PARTICLES));

    
    outputColor = mix(vec4(uv,0.8+0.5*sin(iTime),1.0), vec4(pixel, 1.0), 0.8);
    outputColor.a = max(max(outputColor.r, outputColor.g), outputColor.b);
}"
)
    end

end