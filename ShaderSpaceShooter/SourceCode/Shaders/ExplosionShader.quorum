use Libraries.Game.Graphics.Shaders.Shader

class ExplosionShader is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetName("Explosion Shader")

        /*
        Adapted from a shader by Jangalomph on Shadertoy.
        https://www.shadertoy.com/view/MljXDw
        Used under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
        */
        SetCode(GetOpenGLVersion() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif
in LOWP vec4 v_color;
in vec2 v_texCoords;
uniform sampler2D u_texture;
uniform float u_aspectRatio;
uniform float iTime;
layout (location = 0) out vec4 outputColor;

//2D explosion test

//noise by iq https://www.shadertoy.com/view/XdXGW8
vec2 hash( vec2 x )
{
    const vec2 k = vec2( 0.3183099, 0.3678794 );
    x = x*k + k.yx;
    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
}

float noise( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );
    
    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

//***************************************************


vec3 Circle(vec2 uv, vec2 p, float r, float blur, vec3 color) {
   
    float d = length(uv-p);
    float c = smoothstep(r, r-blur, d);
    color = vec3(color*c);
    return color;
}

void main()
{
    // Normalized pixel coordinates (from 0 to 2)
    vec2 uv = v_texCoords.xy * 2; // 0 <> 2

    uv -= 1; // -1 <> 1
    uv.x *= u_aspectRatio;
    
    float noiseboi = 0.0;
    noiseboi = noise( 32.0*uv );
    
    vec2 p = vec2(0);
    float r = (mod(iTime, 2.));
    float dissolve = r;
    noiseboi *= dissolve;
    vec3 color = vec3(0);
    float ir = clamp(-1.*mod(iTime,2.)+1., 0.04, 1.0); 
    
    if (r < .3){ 
        color = vec3(1., .8, .5);
    } else {
        color = vec3(1., .3, .02);
    }
    vec3 c = Circle(uv, p, r, 0.04, color);
    c -= Circle(uv, p, r, ir, color);
    c *= 2.;
    noiseboi *= c.x+c.y+c.z; 
    c += noiseboi;
    c += Circle(uv, p, -1.*mod(iTime,2.)+1.0, .8, vec3(1.0, .84, .23));
    
    
    outputColor = vec4(c,c.r + c.g + c.b) * texture(u_texture, v_texCoords);
}"
)
    end

end