use Libraries.Game.Graphics.Shaders.Shader

class ConfettiShader is Shader

    on create
        SetType(parent:Shader:FRAGMENT_SHADER)
        SetName("Confetti Shader")

        /*
        Adapted from a shader by yasuo on Shadertoy.
        https://www.shadertoy.com/view/tl2yRm
        Used under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
        */
        SetCode(GetOpenGLVersion() +
"
" +
"#ifdef GL_ES
    #define LOWP lowp
    precision mediump float;
#else
    #define LOWP 
#endif
in LOWP vec4 v_color;
in vec2 v_texCoords;
uniform sampler2D u_texture;
uniform float u_aspectRatio;
uniform float iTime;
uniform vec2 iResolution;
layout (location = 0) out vec4 outputColor;

#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))
#define antialiasing(n) n/min(iResolution.y,iResolution.x)
#define S(d,b) smoothstep(antialiasing(1.0),b,d)
#define T (iTime)
#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)
#define DEBUG 0

// https://iquilezles.org/articles/distfunctions2d
float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

float sdCappedCylinder( vec3 p, float h, float r )
{
  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

vec3 Transform(vec3 p, float angle) {
    p.xz*=Rot(angle);
    p.xy*=Rot(angle*.7);
    return p;
}

float Confetti(vec3 ro, vec3 rd,vec3 pos, float angle, int type) {
    float t = dot(pos-ro,rd);
    vec3 p = ro+rd*t;
    float y = length(pos-p);
    vec2 bsize = vec2(0.2,0.25);
    float d = 1.0;
    if(type == 0 && y<1.0) {
        float x = sqrt(1.0-y);
        
        // front
        vec3 pF = ro+rd*(t-x)-pos;
        pF = Transform(pF,angle);
        vec2 uvF = vec2(atan(pF.x,pF.z),pF.y);
        float f = sdBox(uvF,bsize);
        
        // back
        vec3 pB = ro+rd*(t+x)-pos;
        pB = Transform(pB,angle);
        vec2 uvB = vec2(atan(pB.x,pB.z),pB.y);
        float b = sdBox(uvB,bsize);
        d = min(f,b);
    }
    
    y = sdCappedCylinder((pos-p)*matRotateZ(radians(90.0)), 0.3,0.001);
    bsize = vec2(1.0,0.02);
    if(type == 1 && y<0.07) {
        p = pos-p;
        
        vec2 uv = p.xy;
        uv*=Rot(radians(30.0));
        uv.y-=T*0.2;
        
        uv.y = mod(uv.y,0.1)-0.05;
        d = sdBox(uv,bsize);
    }
    
    return d;
}

void main()
{
//    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
    vec2 uv = vec2(1.0 - v_texCoords.x, 1.0 - v_texCoords.y) - 0.5;

    vec3 bg = .9*max(mix(vec3(1.2)+(.1-length(uv.xy)/3.),vec3(1),.1),0.);
    vec4 col = vec4(bg,0.0);
    vec3 ro = vec3(0.0,0.0,-3.0);
    vec3 rd = normalize(vec3(uv,1));
        
    #if DEBUG
        float confetti = Confetti(ro,rd,vec3(0.0),iTime,1);
        col = mix(col,vec4(vec3(1.0,0.0,0.0),1.0),S(confetti,0.0));
    #else
        for(float i = 0.; i<1.0; i+=1.0/60.0) {
            float x = mix(-8.0,8.0,fract(i));
            float y = mix(-5.,5.,fract((sin(i*564.3)*4570.3)-T*.3));
            float z = mix(5.0,0.0,i);
            float a = T+i*563.34;
            float ratio = clamp(fract((sin(i*1564.3)*9570.3)),0.0,1.0);
            int type = (i<ratio)?0:1;

            vec3 ccol = 0.5 + 0.5*cos(T+uv.xyx+vec3(i,2,4));
            float confetti = Confetti(ro,rd,vec3(x,y,z),a,type);
            col = mix(col,vec4(ccol,1.0),S(confetti,0.0));
        }
    #endif

    outputColor = col;
    outputColor.a = 1.0;
}"
)
    end

end