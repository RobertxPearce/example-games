use Libraries.Game.Game
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.GameStateManager
use Libraries.Interface.Forms.Grouping
use Libraries.Interface.Controls.Button
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Game.InputTable
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputSet
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Skybox
use Libraries.Interface.Forms.Banner
use Libraries.Compute.Math



class Main is Game
    GameStateManager manager
    SoundManager sounds
    GameScreen activeScreen = undefined
    
    GamePage startPage
    GamePage optionsPage
    GamePage levelSelect1
    UpgradePage upgradePage
    
    NavigationMenu levelMenu
    
    Array<Level> levels
    Array<Item2D> toBeRemoved
    
    LevelDisplayLayer statDisplay = undefined
    
    SharedPlayerValues values
    Label speedLabel = undefined
    Label soundLabel = undefined
    Label musicLabel = undefined

    Label mainTitle = undefined
    number titleAnimationTimer = 0
    Math math

    Skybox skybox
    
    action Main
        SetScreenSize(1600, 1000)
        StartGame()
    end
    
    action CreateGame
        ManualLayout layout
        SetLayout(layout)
        
        sounds:PreloadMusic()
        sounds:PreloadSounds()
        
        levelMenu:Initialize()
        
        SetupInputSets()
        InitializeLevels()
        InitializePages()
        InitializeSkybox()
        
        LevelDisplayLayer layer
        AddLayer(layer)
        statDisplay = layer
        statDisplay:Hide()
        
        SwapScreen(startPage)
    end

    action InitializeSkybox
        text prefix = "Resources/Skyboxes/LightBlue/"
        skybox:Load(prefix + "right.png", prefix + "left.png", prefix + "top.png", prefix + "bottom.png", prefix + "front.png", prefix + "back.png")

        SetSkybox(skybox)
    end
    
    action InitializeLevels
        Level level1
        levels:Add(level1)
        
        File file
        file:SetPath("Levels/Level 1.json")
        level1:Load(file)
        level1:SetMusicKey(sounds:LEVEL_1_MUSIC)
        
        Level level2
        levels:Add(level2)
        
        File file2
        file2:SetPath("Levels/Level 2.json")
        level2:Load(file2)
        level2:SetMusicKey(sounds:LEVEL_2_MUSIC)
        
        Level level3
        levels:Add(level3)
        
        File file3
        file3:SetPath("Levels/Level 3.json")
        level3:Load(file3)
        level3:SetMusicKey(sounds:LEVEL_3_MUSIC)
        
        Level level4
        levels:Add(level4)
        
        File file4
        file4:SetPath("Levels/Level 4.json")
        level4:Load(file4)
        level4:SetMusicKey(sounds:LEVEL_4_MUSIC)
        
        Level level5
        levels:Add(level5)
        
        File file5
        file5:SetPath("Levels/Level 5.json")
        level5:Load(file5)
        level5:SetMusicKey(sounds:LEVEL_5_MUSIC)
    end
    
    action InitializePages
        Color color
        
        // Initialize the start page
        startPage:SetName("Start Screen")
        startPage:SetTitleFontSize(90)
        startPage:SetTitle("Block BREAKER")
        mainTitle = startPage:GetTitleLabel()
        startPage:SetMusicKey(sounds:MENU_MUSIC)
        mainTitle:SetFontColor(color:White())
        mainTitle:SetFontOutlineColor(color:Teal())
        mainTitle:SetFontOutlineThickness(1)
        
        Grouping startOptions = startPage:AddGrouping("Start Menu Buttons")
        startOptions:PositionFromBottom()
        
        Button optionsButton = startOptions:AddButton("Options")
        Button startGameButton = startOptions:AddButton("START!")
        Button exitButton = startOptions:AddButton("Exit")
        
        startGameButton:SetToHugeFont()
        startGameButton:SetBackgroundColor(color:CustomColor(0.8, 1, 0.85, 1))
        optionsButton:SetBackgroundColor(color:CustomColor(0.8, 0.85, 1, 1))
        optionsButton:SetToLargeFont()
        exitButton:SetBackgroundColor(color:CustomColor(1, 0.8, 0.75, 1))
        exitButton:SetToLargeFont()
        
        ScreenNavigationBehavior goToOptions
        goToOptions:SetScreen(optionsPage)
        ScreenNavigationBehavior goToSelect1
        goToSelect1:SetScreen(levelSelect1)
        startGameButton:SetBehavior(goToSelect1)
        
        ExitBehavior exitBehavior
        exitButton:SetBehavior(exitBehavior)
        
        optionsButton:SetBehavior(goToOptions)
        
        // Initialize the options page.
        Banner optionsBanner = optionsPage:AddBanner("Game Options")
        optionsBanner:SetTitleSizeHuge()
        optionsBanner:SetBackgroundColor(color:CustomColor(0, 0, 1, 0.5))
        optionsBanner:GetTitleLabel():SetFontColor(color:White())
        
        Grouping speedGroup = optionsPage:AddGrouping("Speed Options")
        speedGroup:SetTitle("Ball Speed")
        speedGroup:GetTitleLabel():SetFontColor(color:White())
        speedGroup:SetTitleSizeLarge()
        Button speedDown = speedGroup:AddButton("Ball Speed Down")
        speedDown:SetLabelText("-")
        speedDown:SetToHugeFont()
        speedLabel = speedGroup:AddLabel("Ball Speed", "" + cast(integer, values:GetBallVelocity()))
        speedLabel:SetToLargeFont()
        speedLabel:SetFontColor(color:White())
        Button speedUp = speedGroup:AddButton("Ball Speed Up")
        speedUp:SetLabelText("+")
        speedUp:SetToHugeFont()

        AdjustSpeedBehavior doSpeedDown
        doSpeedDown:SetAmount(-50)
        AdjustSpeedBehavior doSpeedUp
        doSpeedUp:SetAmount(50)
        speedDown:SetBehavior(doSpeedDown)
        speedUp:SetBehavior(doSpeedUp)

        Grouping soundGroup = optionsPage:AddGrouping("Sound Options")
        soundGroup:SetTitle("Sound Volume")
        soundGroup:SetTitleSizeLarge()
        soundGroup:GetTitleLabel():SetFontColor(color:White())
        Button soundDown = soundGroup:AddButton("Sound Volume Down")
        soundDown:SetLabelText("-")
        soundDown:SetToHugeFont()
        soundLabel = soundGroup:AddLabel("Sound Volume", cast(integer, values:GetSoundVolume() * 100) + "%")
        soundLabel:SetToLargeFont()
        soundLabel:SetFontColor(color:White())
        Button soundUp = soundGroup:AddButton("Sound Volume Up")
        soundUp:SetLabelText("+")
        soundUp:SetToHugeFont()

        AdjustSoundBehavior doSoundDown
        doSoundDown:SetAmount(-0.05)
        AdjustSoundBehavior doSoundUp
        doSoundUp:SetAmount(0.05)
        soundDown:SetBehavior(doSoundDown)
        soundUp:SetBehavior(doSoundUp)

        Grouping musicGroup = optionsPage:AddGrouping("Music Options")
        musicGroup:SetTitle("Music Volume")
        musicGroup:SetTitleSizeLarge()
        musicGroup:GetTitleLabel():SetFontColor(color:White())
        Button musicDown = musicGroup:AddButton("Music Volume Down")
        musicDown:SetLabelText("-")
        musicDown:SetToHugeFont()
        musicLabel = musicGroup:AddLabel("Music Volume", cast(integer, values:GetMusicVolume() * 100) + "%")
        musicLabel:SetToLargeFont()
        musicLabel:SetFontColor(color:White())
        Button musicUp = musicGroup:AddButton("Music Volume Up")
        musicUp:SetLabelText("+")
        musicUp:SetToHugeFont()

        AdjustMusicBehavior doMusicDown
        doMusicDown:SetAmount(-0.05)
        AdjustMusicBehavior doMusicUp
        doMusicUp:SetAmount(0.05)
        musicDown:SetBehavior(doMusicDown)
        musicUp:SetBehavior(doMusicUp)
        
        Grouping optionsConfirmGroup = optionsPage:AddGrouping("Confirm Row")
        optionsConfirmGroup:PositionFromBottom()
        Button optionsConfirm = optionsConfirmGroup:AddButton("Confirm")
        
        ScreenNavigationBehavior goToStart
        goToStart:SetScreen(startPage)
        optionsConfirm:SetBehavior(goToStart)
        
        
        // Initialize the first level select page.
        Banner selectBanner = levelSelect1:AddBanner("Level Selection")
        selectBanner:SetBackgroundColor(color:CustomColor(0, 0, 1, 0.5))
        selectBanner:SetTitleSizeHuge()
        selectBanner:GetTitleLabel():SetFontColor(color:White())
        levelSelect1:SetMusicKey(sounds:MENU_MUSIC)
        
        Grouping levelsGrouping1 = levelSelect1:AddGrouping("Levels")
levelsGrouping1:SetColumns(3)
        Button level1 = levelsGrouping1:AddButton("Level 1")
        Button level2 = levelsGrouping1:AddButton("Level 2")
        Button level3 = levelsGrouping1:AddButton("Level 3")
        level1:SetToLargeFont()
level2:SetToLargeFont()
level3:SetToLargeFont()
        levelsGrouping1:PositionFromCenter()
        
        Grouping levelsGrouping2 = levelSelect1:AddGrouping("Levels Continued")
        levelsGrouping2:PositionFromCenter()
Button level4 = levelsGrouping2:AddButton("Level 4")
        Button level5 = levelsGrouping2:AddButton("Level 5")
        level4:SetToLargeFont()
        level5:SetToLargeFont()
        
        Grouping levelReturnGroup = levelSelect1:AddGrouping("Return Row")
        levelReturnGroup:PositionFromBottom()
        Button level1Upgrades = levelReturnGroup:AddButton("Upgrades")
        Button level1Return = levelReturnGroup:AddButton("Return")
        level1Return:SetBehavior(goToStart)
        
        upgradePage:Initialize()
        ScreenNavigationBehavior goToUpgrades
        goToUpgrades:SetScreen(upgradePage)
        level1Upgrades:SetBehavior(goToUpgrades)
        
        ScreenNavigationBehavior goToLevel1
        goToLevel1:SetScreen(levels:Get(0))
        level1:SetBehavior(goToLevel1)
        
        ScreenNavigationBehavior goToLevel2
        goToLevel2:SetScreen(levels:Get(1))
        level2:SetBehavior(goToLevel2)
        
        ScreenNavigationBehavior goToLevel3
        goToLevel3:SetScreen(levels:Get(2))
        level3:SetBehavior(goToLevel3)
        
ScreenNavigationBehavior goToLevel4
        goToLevel4:SetScreen(levels:Get(3))
        level4:SetBehavior(goToLevel4)
        
ScreenNavigationBehavior goToLevel5
        goToLevel5:SetScreen(levels:Get(4))
        level5:SetBehavior(goToLevel5)
    end
    
    action SwapScreen(GameScreen screen)
if activeScreen not= undefined
            activeScreen:OnSwapFrom()
            Remove(activeScreen)
        end
        activeScreen = screen
        if activeScreen not= undefined
            Add(activeScreen)
            activeScreen:SwapTo()
        end
    end
    
    action GetActiveScreen returns GameScreen
        return activeScreen
    end
    
    action SetBackgroundColor(Color color)
        GraphicsManager graphics = manager:GetGameGraphics()
        graphics:ClearScreenColor(color:GetRed(), color:GetGreen(), color:GetBlue(), color:GetAlpha())
    end
    
    action SetupInputSets
        KeyboardEvent keys
        
        InputTable debuggerTable
        debuggerTable:SetIdentifier("Debugger")
        
        InputSet spaceSet
        spaceSet:SetKeyboardInput(keys:SPACE)
        DebuggerFireBehavior fireBehavior
        debuggerTable:Add(spaceSet, fireBehavior)
        
InputSet leftSet
InputSet rightSet
InputSet upSet
InputSet downSet
        leftSet:SetKeyboardInput(keys:LEFT)
        rightSet:SetKeyboardInput(keys:RIGHT)
        upSet:SetKeyboardInput(keys:UP)
        downSet:SetKeyboardInput(keys:DOWN)
        
        InputSet leftContinueSet = leftSet:Copy()
        leftContinueSet:SetInputTrigger(leftContinueSet:CONTINUE)
        DebuggerRotateBehavior leftRotate
        leftRotate:SetRotationSpeed(-90)
        debuggerTable:Add(leftContinueSet, leftRotate)
        
        InputSet rightContinueSet = rightSet:Copy()
        rightContinueSet:SetInputTrigger(rightContinueSet:CONTINUE)
        DebuggerRotateBehavior rightRotate
        rightRotate:SetRotationSpeed(90)
        debuggerTable:Add(rightContinueSet,rightRotate)

        ChangeWeaponBehavior changeWeapon
        debuggerTable:Add(upSet, changeWeapon)
        debuggerTable:Add(downSet, changeWeapon)
        
        AddInputTable(debuggerTable)
        
        InputTable defaultTable = GetDefaultInputTable()
        InputSet releaseLeft = leftSet:Copy()
        releaseLeft:SetInputTrigger(releaseLeft:FINISH)
        InputSet releaseRight = rightSet:Copy()
        releaseRight:SetInputTrigger(releaseRight:FINISH)
        AnnounceAngleBehavior announceAngle
        debuggerTable:Add(releaseLeft, announceAngle)
        debuggerTable:Add(releaseRight, announceAngle)
        
        
        EscapeBehavior escapeBehavior
        InputSet escapeSet
        escapeSet:SetKeyboardInput(keys:ESCAPE)
        defaultTable:Add(escapeSet, escapeBehavior)
        
        InputSet ctrlF
ctrlF:SetKeyboardInput(keys:F)
        ctrlF:AddModifier(ctrlF:CONTROL)
        StartBlockNavigationBehavior startNavigationBehavior
        defaultTable:Add(ctrlF, startNavigationBehavior)
        
InputSet ctrlI
ctrlI:SetKeyboardInput(keys:I)
        ctrlI:AddModifier(ctrlI:CONTROL)
        GoToStageInfoBehavior goToStageInfo
        defaultTable:Add(ctrlI, goToStageInfo)
        
        InputTable blockSelectTable
        blockSelectTable:SetIdentifier("BlockSelectionMarker")
        
        MoveBlockSelectionBehavior moveLeftBehavior
        moveLeftBehavior:SetDirection(-1, 0)
MoveBlockSelectionBehavior moveRightBehavior
        moveRightBehavior:SetDirection(1, 0)
MoveBlockSelectionBehavior moveUpBehavior
        moveUpBehavior:SetDirection(0, 1)
MoveBlockSelectionBehavior moveDownBehavior
        moveDownBehavior:SetDirection(0, -1)
        
        blockSelectTable:Add(leftSet, moveLeftBehavior)
blockSelectTable:Add(rightSet, moveRightBehavior)
blockSelectTable:Add(upSet, moveUpBehavior)
blockSelectTable:Add(downSet, moveDownBehavior)
        
        InputSet tabSet
        tabSet:SetKeyboardInput(keys:TAB)
        SelectNextPriorityBehavior nextPriority
        SelectPreviousPriorityBehavior previousPriority
        
        InputSet shiftTabSet = tabSet:Copy()
        shiftTabSet:AddModifier(shiftTabSet:SHIFT)
        
blockSelectTable:Add(tabSet, nextPriority)
        blockSelectTable:Add(shiftTabSet, previousPriority)
        
        FocusDebuggerBehavior focusDebugBehavior
        blockSelectTable:Add(escapeSet,focusDebugBehavior)
        
        AddInputTable(blockSelectTable)
        
        InputTable displayBarTable
        displayBarTable:SetIdentifier("DisplayBar")
        displayBarTable:Add(escapeSet,focusDebugBehavior)
        AddInputTable(displayBarTable)
    end
    
    action Update(number seconds)
        RemoveMarkedItems()
        skybox:Rotate(0, 1, 0, 0.25 * seconds)

        titleAnimationTimer = titleAnimationTimer + seconds * 0.25
        if activeScreen not= undefined and activeScreen:Equals(startPage)
            Color color
            mainTitle:SetFontOutlineThickness(0.01 + 6 * math:AbsoluteValue(math:Sine(titleAnimationTimer)))
        end
    end
    
    action MarkForRemoval(Item2D item)
        toBeRemoved:Add(item)
    end
    
    action RemoveMarkedItems
repeat until toBeRemoved:IsEmpty()        
            Item2D item = toBeRemoved:RemoveFromFront()
            if item:GetParent() not= undefined
if item is Ball
            Ball ball = cast(Ball, item)
                ball:OnDestroy()
            elseif item is Block
            Block block = cast(Block, item)
                block:OnDestroy()
            end
                check
item:GetParent():Remove(item)
                detect error
                    output "WARNING: Error while attempting to remove " + item:GetName() + " with parent " + item:GetParent():GetName()
                end
            end
        end
    end
    
    action GetStatDisplay returns LevelDisplayLayer
        return statDisplay
    end
    
    action GetLevelSelect returns GamePage
        return levelSelect1
    end
    
    action GetLevelMenu returns NavigationMenu
        return levelMenu
    end

    action GetSpeedLabel returns Label
        return speedLabel
    end

    action GetSoundLabel returns Label
        return soundLabel
    end

    action GetMusicLabel returns Label
        return musicLabel
    end
    
    action GetSoundManager returns SoundManager
        return sounds
    end
    
    action GetUpgradePage returns UpgradePage
        return upgradePage
    end

end
