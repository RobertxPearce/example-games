use Libraries.Game.Graphics.Texture

shared class SharedPlayerValues
    public constant integer MIN_BALL_VELOCITY = 100
    public constant integer MAX_BALL_VELOCITY = 700
    public constant number MINIMUM_DEBUGGER_ANGLE = -80
    public constant number MAXIMUM_DEBUGGER_ANGLE = 80
    number ballVelocity = 400
    number soundVolume = 0.5
    number musicVolume = 0.5
    
    Texture ballTexture = undefined
    integer baseBallHP = 5
    integer coins = 10
    
    integer bonusShots = 0
    integer bonusHP = 0
    
    boolean bonusShots1Purchased = false
    boolean bonusShots2Purchased = false
    boolean bonusHP1Purchased = false
    boolean bonusHP2Purchased = false
    boolean shotgunPurchased = false
    
    action GetBallTexture returns Texture
        if ballTexture = undefined
            Texture texture
            ballTexture = texture
            texture:LoadFromFile("Resources/Ball.png")
        end
        
        return ballTexture
    end
    
    action GetBaseBallHP returns integer
        return baseBallHP
    end
    
    action GetCoins returns integer
        return coins
    end
    
    action SetCoins(integer coins)
        me:coins = coins
    end
    
    action GetBonusShots returns integer
        return bonusShots
    end
    
    action GetBallVelocity returns number
        return ballVelocity
    end
    
    action SetBallVelocity(number speed)
        if speed > MAX_BALL_VELOCITY
            speed = MAX_BALL_VELOCITY
        end
        if speed < MIN_BALL_VELOCITY
            speed = MIN_BALL_VELOCITY
        end

        ballVelocity = speed
    end
    
    action GetBonusHP returns integer
        return bonusHP
    end

    action GetSoundVolume returns number
        return soundVolume
    end

    action SetSoundVolume(number volume)
        if volume > 1.0
            volume = 1.0
        end
        if volume < 0.0
            volume = 0.0
        end

        soundVolume = volume
    end
    
    action GetMusicVolume returns number
        return musicVolume
    end

    action SetMusicVolume(number volume)
        if volume > 1.0
            volume = 1.0
        end
        if volume < 0.0
            volume = 0.0
        end

        musicVolume = volume
    end

    action GetBonusShots1Purchased returns boolean
        return bonusShots1Purchased
    end

    action SetBonusShots1Purchased(boolean bonusShots1Purchased)
        if bonusShots1Purchased = true
            bonusShots = bonusShots + 2
        end
        me:bonusShots1Purchased = bonusShots1Purchased
    end

    action GetBonusShots2Purchased returns boolean
        return bonusShots2Purchased
    end

    action SetBonusShots2Purchased(boolean bonusShots2Purchased)
if bonusShots2Purchased = true
            bonusShots = bonusShots + 4
        end
        me:bonusShots2Purchased = bonusShots2Purchased
    end

    action GetBonusHP1Purchased returns boolean
        return bonusHP1Purchased
    end

    action SetBonusHP1Purchased(boolean bonusHP1Purchased)
if bonusHP1Purchased = true
            bonusHP = bonusHP + 1
        end
        me:bonusHP1Purchased = bonusHP1Purchased
    end

    action GetBonusHP2Purchased returns boolean
        return bonusHP2Purchased
    end

    action SetBonusHP2Purchased(boolean bonusHP2Purchased)
if bonusHP2Purchased = true
            bonusHP = bonusHP + 2
        end
        me:bonusHP2Purchased = bonusHP2Purchased
    end

    action GetShotgunPurchased returns boolean
        return shotgunPurchased
    end

    action SetShotgunPurchased(boolean shotgunPurchased)
        me:shotgunPurchased = shotgunPurchased
    end

end
